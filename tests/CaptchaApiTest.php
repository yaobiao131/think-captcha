<?php

namespace think\captcha\Tests;

use Mockery as m;
use think\App;
use think\captcha\facade\CaptchaApi;
use think\Config;
use think\Container;

class CaptchaApiTest extends TestCase {
    private array $customConfig;

    protected function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->customConfig = [
            //验证码位数
            'length'   => 4,
            // 验证码字符集合
            'codeSet'  => '2345678abcdefhijkmnpqrstuvwxyzABCDEFGHJKLMNPQRTUVWXY',
            // 验证码过期时间
            'expire'   => 1800,
            // 是否使用中文验证码
            'useZh'    => false,
            // 是否使用算术验证码
            'math'     => false,
            // 是否使用背景图
            'useImgBg' => false,
            //验证码字符大小
            'fontSize' => 25,
            // 是否使用混淆曲线
            'useCurve' => true,
            //是否添加杂点
            'useNoise' => true,
            // 验证码字体 不设置则随机
            'fontttf'  => '',
            //背景颜色
            'bg'       => [243, 251, 254],
            // 验证码图片高度
            'imageH'   => 0,
            // 验证码图片宽度
            'imageW'   => 0,
        ];

        Container::setInstance($this->app);
        $this->app->shouldReceive('make')->with(App::class)->andReturn($this->app);
        $this->config = m::mock(Config::class)->makePartial();
        $this->config->shouldReceive('get')->with('captcha')->andReturn($this->customConfig);
        $this->app->shouldReceive('get')->with('config')->andReturn($this->config);
    }

    public function testCaptchaGenerate() {
        $image = CaptchaApi::create();
        self::assertIsArray($image);
    }

    public function testCaptchaCheck() {
        $captcha = CaptchaApi::create();
        self::assertTrue(CaptchaApi::check($captcha['md5'], $captcha['key']));
    }
}